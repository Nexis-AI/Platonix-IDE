name: Release Platonix IDE

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string

jobs:
  create-release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Get Version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: Platonix IDE v${{ steps.get_version.outputs.version }}
          body: |
            # Platonix IDE v${{ steps.get_version.outputs.version }}
            
            ## What's New
            - AI-powered code completion with local Ollama integration
            - Privacy-focused development environment
            - Custom Platonix Dark theme
            - Enhanced performance and stability
            - Multi-architecture support for all major platforms
            
            ## Installation
            Download the appropriate installer for your platform and architecture below.
            
            ## Supported Platforms
            - Windows (x64, ARM64)
            - macOS (Intel x64, Apple Silicon ARM64)
            - Linux (x64, ARM64, ARMhf, LoongArch64, PowerPC64, RISC-V64)
            - Linux packages (.deb, .rpm, .tar.gz)
            
            ## Changelog
            See [CHANGELOG.md](https://github.com/nexisnetwork/platonix-ide/blob/main/CHANGELOG.md) for detailed changes.
          draft: false
          prerelease: false

  build-release:
    needs: create-release
    strategy:
      matrix:
        include:
          # Windows builds
          - os: windows-latest
            platform: win32
            arch: x64
            artifact_name: platonix-ide-win32-x64
            file_extension: .exe
          - os: windows-latest
            platform: win32
            arch: arm64
            artifact_name: platonix-ide-win32-arm64
            file_extension: .exe
            
          # macOS builds
          - os: macos-latest
            platform: darwin
            arch: x64
            artifact_name: platonix-ide-darwin-x64
            file_extension: .dmg
          - os: macos-latest
            platform: darwin
            arch: arm64
            artifact_name: platonix-ide-darwin-arm64
            file_extension: .dmg
            
          # Linux x64 builds
          - os: ubuntu-latest
            platform: linux
            arch: x64
            artifact_name: platonix-ide-linux-x64
            file_extension: .tar.gz
          - os: ubuntu-latest
            platform: linux
            arch: x64
            artifact_name: platonix-ide-linux-x64-deb
            file_extension: .deb
            package_type: deb
          - os: ubuntu-latest
            platform: linux
            arch: x64
            artifact_name: platonix-ide-linux-x64-rpm
            file_extension: .rpm
            package_type: rpm
            
          # Linux ARM64 builds
          - os: ubuntu-latest
            platform: linux
            arch: arm64
            artifact_name: platonix-ide-linux-arm64
            file_extension: .tar.gz
          - os: ubuntu-latest
            platform: linux
            arch: arm64
            artifact_name: platonix-ide-linux-arm64-deb
            file_extension: .deb
            package_type: deb
            
          # Linux ARMhf builds
          - os: ubuntu-latest
            platform: linux
            arch: armhf
            artifact_name: platonix-ide-linux-armhf
            file_extension: .tar.gz
          - os: ubuntu-latest
            platform: linux
            arch: armhf
            artifact_name: platonix-ide-linux-armhf-deb
            file_extension: .deb
            package_type: deb
            
          # Linux exotic architectures
          - os: ubuntu-latest
            platform: linux
            arch: loong64
            artifact_name: platonix-ide-linux-loong64
            file_extension: .tar.gz
          - os: ubuntu-latest
            platform: linux
            arch: ppc64le
            artifact_name: platonix-ide-linux-ppc64le
            file_extension: .tar.gz
          - os: ubuntu-latest
            platform: linux
            arch: riscv64
            artifact_name: platonix-ide-linux-riscv64
            file_extension: .tar.gz
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'yarn'

      - name: Install Cross-compilation Tools (Linux ARM)
        if: matrix.platform == 'linux' && matrix.arch != 'x64'
        run: |
          sudo apt-get update
          case "${{ matrix.arch }}" in
            arm64)
              sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
              export CC=aarch64-linux-gnu-gcc
              export CXX=aarch64-linux-gnu-g++
              export AR=aarch64-linux-gnu-ar
              export STRIP=aarch64-linux-gnu-strip
              export npm_config_arch=arm64
              ;;
            armhf)
              sudo apt-get install -y gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf
              export CC=arm-linux-gnueabihf-gcc
              export CXX=arm-linux-gnueabihf-g++
              export AR=arm-linux-gnueabihf-ar
              export STRIP=arm-linux-gnueabihf-strip
              export npm_config_arch=arm
              ;;
            loong64)
              # LoongArch cross-compilation setup
              echo "Setting up LoongArch64 cross-compilation..."
              ;;
            ppc64le)
              sudo apt-get install -y gcc-powerpc64le-linux-gnu g++-powerpc64le-linux-gnu
              export CC=powerpc64le-linux-gnu-gcc
              export CXX=powerpc64le-linux-gnu-g++
              export AR=powerpc64le-linux-gnu-ar
              export STRIP=powerpc64le-linux-gnu-strip
              export npm_config_arch=ppc64
              ;;
            riscv64)
              sudo apt-get install -y gcc-riscv64-linux-gnu g++-riscv64-linux-gnu
              export CC=riscv64-linux-gnu-gcc
              export CXX=riscv64-linux-gnu-g++
              export AR=riscv64-linux-gnu-ar
              export STRIP=riscv64-linux-gnu-strip
              export npm_config_arch=riscv64
              ;;
          esac

      - name: Install Dependencies
        run: |
          if [ "${{ matrix.platform }}" = "linux" ] && [ "${{ matrix.arch }}" != "x64" ]; then
            npm_config_arch=${{ matrix.arch }} yarn install --frozen-lockfile
          else
            yarn install --frozen-lockfile
          fi
        env:
          npm_config_arch: ${{ matrix.arch }}

      - name: Update Version
        run: |
          npm version ${{ needs.create-release.outputs.version }} --no-git-tag-version
          node -e "const p = require('./product.json'); p.platonixVersion = '${{ needs.create-release.outputs.version }}'; require('fs').writeFileSync('./product.json', JSON.stringify(p, null, 2));"

      - name: Build
        run: yarn run compile
        env:
          NODE_ENV: production
          npm_config_arch: ${{ matrix.arch }}

      - name: Install vsce
        run: yarn global add @vscode/vsce

      - name: Package Linux
        if: matrix.platform == 'linux' && matrix.package_type != 'deb' && matrix.package_type != 'rpm'
        run: |
          yarn run gulp vscode-linux-${{ matrix.arch }}
          cd ../VSCode-linux-${{ matrix.arch }}
          tar -czf platonix-ide-linux-${{ matrix.arch }}.tar.gz *
          mv platonix-ide-linux-${{ matrix.arch }}.tar.gz ../platonix-ide/

      - name: Package Linux DEB
        if: matrix.platform == 'linux' && matrix.package_type == 'deb'
        run: |
          yarn run gulp vscode-linux-${{ matrix.arch }}-deb
          cd ..
          find . -name "*.deb" -exec mv {} platonix-ide/platonix-ide-linux-${{ matrix.arch }}.deb \;

      - name: Package Linux RPM
        if: matrix.platform == 'linux' && matrix.package_type == 'rpm'
        run: |
          yarn run gulp vscode-linux-${{ matrix.arch }}-rpm
          cd ..
          find . -name "*.rpm" -exec mv {} platonix-ide/platonix-ide-linux-${{ matrix.arch }}.rpm \;

      - name: Package Windows
        if: matrix.platform == 'win32'
        shell: pwsh
        run: |
          if ("${{ matrix.arch }}" -eq "arm64") {
            yarn run gulp vscode-win32-${{ matrix.arch }}
            cd ..\VSCode-win32-${{ matrix.arch }}
            Compress-Archive -Path * -DestinationPath platonix-ide-win32-${{ matrix.arch }}.zip
            Move-Item platonix-ide-win32-${{ matrix.arch }}.zip ..\platonix-ide\
          } else {
            yarn run gulp vscode-win32-${{ matrix.arch }}-inno-updater
            $installerPath = Get-ChildItem -Path "..\VSCode-win32-${{ matrix.arch }}-inno-updater" -Filter "*.exe" | Select-Object -First 1
            if ($installerPath) {
              Move-Item $installerPath.FullName "platonix-ide-setup-${{ matrix.arch }}.exe"
            }
          }

      - name: Package macOS
        if: matrix.platform == 'darwin'
        run: |
          yarn run gulp vscode-darwin-${{ matrix.arch }}
          cd ../VSCode-darwin-${{ matrix.arch }}
          hdiutil create -volname "Platonix IDE" -srcfolder . -ov -format UDZO platonix-ide-darwin-${{ matrix.arch }}.dmg
          mv platonix-ide-darwin-${{ matrix.arch }}.dmg ../platonix-ide/

      - name: Upload Release Asset (Linux tar.gz)
        if: matrix.platform == 'linux' && matrix.file_extension == '.tar.gz'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./platonix-ide-linux-${{ matrix.arch }}.tar.gz
          asset_name: platonix-ide-${{ needs.create-release.outputs.version }}-linux-${{ matrix.arch }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload Release Asset (Linux DEB)
        if: matrix.platform == 'linux' && matrix.file_extension == '.deb'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./platonix-ide-linux-${{ matrix.arch }}.deb
          asset_name: platonix-ide-${{ needs.create-release.outputs.version }}-linux-${{ matrix.arch }}.deb
          asset_content_type: application/x-deb

      - name: Upload Release Asset (Linux RPM)
        if: matrix.platform == 'linux' && matrix.file_extension == '.rpm'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./platonix-ide-linux-${{ matrix.arch }}.rpm
          asset_name: platonix-ide-${{ needs.create-release.outputs.version }}-linux-${{ matrix.arch }}.rpm
          asset_content_type: application/x-rpm

      - name: Upload Release Asset (Windows EXE)
        if: matrix.platform == 'win32' && matrix.arch == 'x64'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./platonix-ide-setup-${{ matrix.arch }}.exe
          asset_name: platonix-ide-${{ needs.create-release.outputs.version }}-setup-${{ matrix.arch }}.exe
          asset_content_type: application/x-msdownload

      - name: Upload Release Asset (Windows ARM64 ZIP)
        if: matrix.platform == 'win32' && matrix.arch == 'arm64'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./platonix-ide-win32-${{ matrix.arch }}.zip
          asset_name: platonix-ide-${{ needs.create-release.outputs.version }}-win32-${{ matrix.arch }}.zip
          asset_content_type: application/zip

      - name: Upload Release Asset (macOS)
        if: matrix.platform == 'darwin'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./platonix-ide-darwin-${{ matrix.arch }}.dmg
          asset_name: platonix-ide-${{ needs.create-release.outputs.version }}-darwin-${{ matrix.arch }}.dmg
          asset_content_type: application/x-apple-diskimage

  publish-release-notes:
    needs: [create-release, build-release]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Generate Changelog
        run: |
          echo "# Platonix IDE v${{ needs.create-release.outputs.version }} Release Notes" > release-notes.md
          echo "" >> release-notes.md
          echo "## Downloads" >> release-notes.md
          echo "" >> release-notes.md
          echo "### Windows" >> release-notes.md
          echo "- [Windows x64 Installer](https://github.com/nexisnetwork/platonix-ide/releases/download/v${{ needs.create-release.outputs.version }}/platonix-ide-${{ needs.create-release.outputs.version }}-setup-x64.exe)" >> release-notes.md
          echo "- [Windows ARM64 Portable](https://github.com/nexisnetwork/platonix-ide/releases/download/v${{ needs.create-release.outputs.version }}/platonix-ide-${{ needs.create-release.outputs.version }}-win32-arm64.zip)" >> release-notes.md
          echo "" >> release-notes.md
          echo "### macOS" >> release-notes.md
          echo "- [macOS Intel (x64)](https://github.com/nexisnetwork/platonix-ide/releases/download/v${{ needs.create-release.outputs.version }}/platonix-ide-${{ needs.create-release.outputs.version }}-darwin-x64.dmg)" >> release-notes.md
          echo "- [macOS Apple Silicon (ARM64)](https://github.com/nexisnetwork/platonix-ide/releases/download/v${{ needs.create-release.outputs.version }}/platonix-ide-${{ needs.create-release.outputs.version }}-darwin-arm64.dmg)" >> release-notes.md
          echo "" >> release-notes.md
          echo "### Linux" >> release-notes.md
          echo "- [Linux x64 (.tar.gz)](https://github.com/nexisnetwork/platonix-ide/releases/download/v${{ needs.create-release.outputs.version }}/platonix-ide-${{ needs.create-release.outputs.version }}-linux-x64.tar.gz)" >> release-notes.md
          echo "- [Linux x64 (.deb)](https://github.com/nexisnetwork/platonix-ide/releases/download/v${{ needs.create-release.outputs.version }}/platonix-ide-${{ needs.create-release.outputs.version }}-linux-x64.deb)" >> release-notes.md
          echo "- [Linux x64 (.rpm)](https://github.com/nexisnetwork/platonix-ide/releases/download/v${{ needs.create-release.outputs.version }}/platonix-ide-${{ needs.create-release.outputs.version }}-linux-x64.rpm)" >> release-notes.md
          echo "- [Linux ARM64 (.tar.gz)](https://github.com/nexisnetwork/platonix-ide/releases/download/v${{ needs.create-release.outputs.version }}/platonix-ide-${{ needs.create-release.outputs.version }}-linux-arm64.tar.gz)" >> release-notes.md
          echo "- [Linux ARM64 (.deb)](https://github.com/nexisnetwork/platonix-ide/releases/download/v${{ needs.create-release.outputs.version }}/platonix-ide-${{ needs.create-release.outputs.version }}-linux-arm64.deb)" >> release-notes.md
          echo "- [Linux ARMhf (.tar.gz)](https://github.com/nexisnetwork/platonix-ide/releases/download/v${{ needs.create-release.outputs.version }}/platonix-ide-${{ needs.create-release.outputs.version }}-linux-armhf.tar.gz)" >> release-notes.md
          echo "- [Linux ARMhf (.deb)](https://github.com/nexisnetwork/platonix-ide/releases/download/v${{ needs.create-release.outputs.version }}/platonix-ide-${{ needs.create-release.outputs.version }}-linux-armhf.deb)" >> release-notes.md
          echo "- [Linux LoongArch64 (.tar.gz)](https://github.com/nexisnetwork/platonix-ide/releases/download/v${{ needs.create-release.outputs.version }}/platonix-ide-${{ needs.create-release.outputs.version }}-linux-loong64.tar.gz)" >> release-notes.md
          echo "- [Linux PowerPC64 (.tar.gz)](https://github.com/nexisnetwork/platonix-ide/releases/download/v${{ needs.create-release.outputs.version }}/platonix-ide-${{ needs.create-release.outputs.version }}-linux-ppc64le.tar.gz)" >> release-notes.md
          echo "- [Linux RISC-V64 (.tar.gz)](https://github.com/nexisnetwork/platonix-ide/releases/download/v${{ needs.create-release.outputs.version }}/platonix-ide-${{ needs.create-release.outputs.version }}-linux-riscv64.tar.gz)" >> release-notes.md
          echo "" >> release-notes.md
          echo "## Installation Instructions" >> release-notes.md
          echo "1. Download the appropriate installer for your platform and architecture" >> release-notes.md
          echo "2. Install Ollama from https://ollama.com" >> release-notes.md
          echo "3. Pull a model: \`ollama pull codellama\`" >> release-notes.md
          echo "4. Launch Platonix IDE and enjoy AI-powered coding!" >> release-notes.md

      - name: Update Release
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const releaseNotes = fs.readFileSync('release-notes.md', 'utf8');
            
            await github.rest.repos.updateRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              release_id: ${{ needs.create-release.outputs.release_id }},
              body: releaseNotes
            });