name: Platonix IDE CI

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main, dev]

jobs:
  build-and-test:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node-version: [18.x, 20.x]
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'

      - name: Install Python (Windows)
        if: runner.os == 'Windows'
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install Build Tools (Windows)
        if: runner.os == 'Windows'
        run: |
          npm install --global windows-build-tools

      - name: Install Dependencies
        run: yarn install --frozen-lockfile
        env:
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1

      - name: Lint
        run: yarn run eslint src --ext ts,tsx,js,jsx
        continue-on-error: true

      - name: Type Check
        run: yarn run monaco-compile-check && yarn run valid-layers-check
        continue-on-error: true

      - name: Run Unit Tests
        run: yarn test-node
        timeout-minutes: 10

      - name: Build
        run: yarn run compile
        timeout-minutes: 15

      - name: Package Build Artifacts
        if: success() && matrix.node-version == '18.x'
        run: |
          mkdir -p artifacts
          tar -czf artifacts/platonix-ide-${{ runner.os }}-${{ github.sha }}.tar.gz out
      
      - name: Upload Build Artifacts
        if: success() && matrix.node-version == '18.x'
        uses: actions/upload-artifact@v3
        with:
          name: platonix-ide-${{ runner.os }}
          path: artifacts/

      - name: Upload Test Coverage
        if: success() && runner.os == 'Linux' && matrix.node-version == '18.x'
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage/

  code-quality:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'yarn'

      - name: Install Dependencies
        run: yarn install --frozen-lockfile

      - name: Check Code Formatting
        run: |
          yarn add --dev prettier
          npx prettier --check "src/**/*.{ts,tsx,js,jsx,css,json}"
        continue-on-error: true

      - name: Security Audit
        run: yarn audit --level moderate
        continue-on-error: true

      - name: License Check
        run: |
          yarn add --dev license-checker
          npx license-checker --summary --excludePrivatePackages
        continue-on-error: true

  integration-tests:
    needs: [build-and-test]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'yarn'

      - name: Install Dependencies
        run: yarn install --frozen-lockfile

      - name: Install Playwright Browsers
        run: npx playwright install chromium

      - name: Run Integration Tests
        run: yarn test-browser-no-install
        timeout-minutes: 20
        env:
          HEADLESS: true

      - name: Upload Playwright Report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  release-build:
    needs: [build-and-test, code-quality]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'yarn'

      - name: Install Dependencies
        run: yarn install --frozen-lockfile

      - name: Build Production
        run: yarn run compile
        env:
          NODE_ENV: production

      - name: Create Release Bundle
        run: |
          mkdir -p release
          tar -czf release/platonix-ide-release-${{ github.sha }}.tar.gz out product.json package.json

      - name: Upload Release Bundle
        uses: actions/upload-artifact@v3
        with:
          name: release-bundle
          path: release/
          retention-days: 90

  notify:
    needs: [build-and-test, code-quality, integration-tests]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
      - name: Check Job Status
        run: |
          if [ "${{ needs.build-and-test.result }}" != "success" ] || \
             [ "${{ needs.code-quality.result }}" != "success" ] || \
             [ "${{ needs.integration-tests.result }}" != "success" ]; then
            echo "CI Pipeline failed!"
            exit 1
          else
            echo "CI Pipeline succeeded!"
          fi

      - name: Create Status Badge
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo "Update README with build status: ${{ job.status }}"